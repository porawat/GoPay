import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  SearchOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  LeftOutlined,
  RightOutlined,
  UserOutlined,
  WarningOutlined,
  LoadingOutlined,
  ReloadOutlined,
  EyeOutlined,
  CalendarOutlined,
  MailOutlined,
  PhoneOutlined,
  HomeOutlined,
} from "@ant-design/icons";
import { Modal, Table, Input, Select, Button, Card, Statistic, Spin, Alert, Badge, Avatar, Tag } from "antd";
import axios from "axios";
import Swal from "sweetalert2";
import { API_URL } from "../../config/config";

// SweetAlert2 Toast Configuration
const Toast = Swal.mixin({
  toast: true,
  position: "top-end",
  showConfirmButton: false,
  timer: 3000,
  timerProgressBar: true,
  didOpen: (toast) => {
    toast.addEventListener("mouseenter", Swal.stopTimer);
    toast.addEventListener("mouseleave", Swal.resumeTimer);
  },
});

// Safe localStorage Access
const safeGetItem = (key) => {
  try {
    return localStorage.getItem(key);
  } catch (error) {
    console.warn("Error accessing localStorage:", error);
    return null;
  }
};

// Axios Interceptor for Token Refresh
axios.interceptors.response.use(
  (response) => response,
  async (error) => {
    if (error.response?.status === 401 && !error.config._retry) {
      error.config._retry = true;
      try {
        const refreshResponse = await axios.post(`${API_URL}/auth/refresh`, {
          refreshToken: safeGetItem("refreshToken"),
        });
        localStorage.setItem("token", refreshResponse.data.token);
        error.config.headers.Authorization = `Bearer ${refreshResponse.data.token}`;
        return axios(error.config);
      } catch (refreshError) {
        localStorage.removeItem("token");
        localStorage.removeItem("refreshToken");
        await Swal.fire({
          title: "üîí ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏",
          text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà",
          icon: "warning",
          confirmButtonText: "‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
          confirmButtonColor: "#1890ff",
        });
        window.location.href = "/login";
        return Promise.reject(refreshError);
      }
    }
    return Promise.reject(error);
  }
);

// Error Boundary Component
class ErrorBoundary extends React.Component {
  state = { hasError: false, error: null };

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error("Error caught by ErrorBoundary:", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50">
          <Card className="max-w-md w-full shadow-lg">
            <div className="text-center">
              <WarningOutlined className="text-red-500 text-4xl mb-4" />
              <h2 className="text-2xl font-bold text-gray-900 mb-3">
                ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
              </h2>
              <p className="text-gray-600 mb-6">
                {this.state.error?.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏î‡πâ"}
              </p>
              <Button
                type="primary"
                icon={<ReloadOutlined />}
                onClick={() => window.location.reload()}
                className="rounded-lg"
              >
                ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
              </Button>
            </div>
          </Card>
        </div>
      );
    }
    return this.props.children;
  }
}

// Main Customer List Component
export default function CustomerList() {
  const { shopId } = useParams();
  const navigate = useNavigate();
  const [customers, setCustomers] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [totalCustomers, setTotalCustomers] = useState(0);
  const [actionLoading, setActionLoading] = useState({});
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCustomer, setSelectedCustomer] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [statusFilter, setStatusFilter] = useState("ALL");

  // Fetch Customers on Mount and Dependencies Change
  useEffect(() => {
    const fetchCustomers = async () => {
      setIsLoading(true);
      setError(null);
      const token = safeGetItem("token");

      if (!token) {
        await Swal.fire({
          title: "üîê ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
          text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
          icon: "warning",
          confirmButtonText: "‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
          confirmButtonColor: "#1890ff",
        });
        navigate("/login");
        return;
      }

      if (!shopId) {
        await Swal.fire({
          title: "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏£‡πâ‡∏≤‡∏ô",
          text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
          icon: "error",
          confirmButtonText: "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô",
          confirmButtonColor: "#1890ff",
        });
        navigate("/myshop");
        return;
      }

      try {
        const params = new URLSearchParams({
          page: page.toString(),
          limit: "10",
        });
        if (statusFilter !== "ALL") {
          params.append("status", statusFilter);
        }

        const response = await axios.get(
          `${API_URL}/customer/all/${shopId}?${params.toString()}`,
          {
            headers: { Authorization: `Bearer ${token}` },
            timeout: 15000,
          }
        );

        if (response.data?.code === 1000) {
          const customerData = response.data.data || [];
          setCustomers(customerData);
          setTotalPages(response.data.pagination?.totalPages || 1);
          setTotalCustomers(
            response.data.pagination?.totalItems || customerData.length
          );
        } else {
          throw new Error(
            response.data?.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ"
          );
        }
      } catch (err) {
        let errorMessage = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ";
        if (err.response) {
          switch (err.response.status) {
            case 403:
              errorMessage =
                err.response.data?.message ||
                "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤";
              break;
            case 401:
              errorMessage = "‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà";
              setTimeout(() => navigate("/login"), 2000);
              break;
            case 404:
              errorMessage = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤";
              break;
            case 500:
              errorMessage =
                "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
              break;
            default:
              errorMessage = err.response.data?.message || errorMessage;
          }
        } else if (err.code === "ECONNABORTED") {
          errorMessage = "‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
        } else if (!navigator.onLine) {
          errorMessage =
            "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠";
        }
        setError(errorMessage);
        Toast.fire({
          icon: "error",
          title: `‚ùå ${errorMessage}`,
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchCustomers();
  }, [shopId, navigate, page, statusFilter]);

  // Approve Customer Handler
  const handleApproveCustomer = async (customer) => {
    const result = await Swal.fire({
      title: "üéâ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
      html: `
        <div class="text-center">
          <p class="text-lg">‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</p>
          <p class="font-bold text-xl text-blue-600">"${customer.name}"</p>
          <p class="text-lg">‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</p>
        </div>
      `,
      showCancelButton: true,
      confirmButtonText: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      cancelButtonText: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      confirmButtonColor: "#1890ff",
      cancelButtonColor: "#d9d9d9",
    });

    if (result.isConfirmed) {
      setActionLoading((prev) => ({ ...prev, [customer.id]: "approving" }));
      try {
        const token = safeGetItem("token");
        if (!token) {
          throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
        }

        const response = await axios.post(
          `${API_URL}/customer/approve/${customer.id}`,
          {},
          {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
            timeout: 15000,
          }
        );

        if (response.data?.code === 1000) {
          setCustomers((prev) =>
            prev.map((c) =>
              c.id === customer.id ? { ...c, status: "APPROVED" } : c
            )
          );
          await Swal.fire({
            title: "üéâ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
            text: `‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ "${customer.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
            icon: "success",
            timer: 2000,
            showConfirmButton: false,
          });
        } else {
          throw new Error(
            response.data?.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ"
          );
        }
      } catch (err) {
        let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤";
        if (err.response?.status === 403) {
          errorMessage =
            err.response.data?.message || "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤";
        } else if (err.response?.status === 401) {
          errorMessage = "‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà";
          setTimeout(() => navigate("/login"), 2000);
        } else if (err.response?.data?.message) {
          errorMessage = err.response.data.message;
        }
        await Swal.fire({
          title: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          text: errorMessage,
          icon: "error",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          confirmButtonColor: "#ff4d4f",
        });
      } finally {
        setActionLoading((prev) => ({ ...prev, [customer.id]: false }));
      }
    }
  };

  // Reject Customer Handler
  const handleRejectCustomer = async (customer) => {
    const result = await Swal.fire({
      title: "‚ö†Ô∏è ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
      html: `
        <div class="text-center">
          <p class="text-lg">‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</p>
          <p class="font-bold text-xl text-red-600">"${customer.name}"</p>
          <p class="text-lg">‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?</p>
          <p class="text-sm text-gray-500 mt-2">‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ</p>
        </div>
      `,
      showCancelButton: true,
      confirmButtonText: "üö´ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò",
      cancelButtonText: "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      confirmButtonColor: "#ff4d4f",
      cancelButtonColor: "#d9d9d9",
    });

    if (result.isConfirmed) {
      setActionLoading((prev) => ({ ...prev, [customer.id]: "rejecting" }));
      try {
        const token = safeGetItem("token");
        if (!token) {
          throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");
        }

        const response = await axios.post(
          `${API_URL}/customer/reject/${customer.id}`,
          {},
          {
            headers: {
              Authorization: `Bearer ${token}`,
              "Content-Type": "application/json",
            },
            timeout: 15000,
          }
        );

        if (response.data?.code === 1000) {
          setCustomers((prev) =>
            prev.map((c) =>
              c.id === customer.id
                ? { ...c, status: "REJECTED", is_active: "INACTIVE" }
                : c
            )
          );
          await Swal.fire({
            title: "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
            text: `‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò "${customer.name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
            icon: "info",
            timer: 2000,
            showConfirmButton: false,
          });
        } else {
          throw new Error(response.data?.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ");
        }
      } catch (err) {
        let errorMessage = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤";
        if (err.response?.status === 403) {
          errorMessage =
            err.response.data?.message || "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤";
        } else if (err.response?.status === 401) {
          errorMessage = "‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà";
          setTimeout(() => navigate("/login"), 2000);
        } else if (err.response?.data?.message) {
          errorMessage = err.response.data.message;
        }
        await Swal.fire({
          title: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
          text: errorMessage,
          icon: "error",
          confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
          confirmButtonColor: "#ff4d4f",
        });
      } finally {
        setActionLoading((prev) => ({ ...prev, [customer.id]: false }));
      }
    }
  };

  // View Customer Details Handler
  const handleViewCustomer = (customer) => {
    setSelectedCustomer(customer);
    setShowModal(true);
  };

  // Filter Customers by Search Term
  const filteredCustomers = customers.filter(
    (customer) =>
      customer.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      customer.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      customer.phone?.includes(searchTerm)
  );

  // Status Badge Renderer
  const getStatusBadge = (status) => {
    const statusConfig = {
      PENDING: { color: "gold", label: "‚è≥ ‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" },
      APPROVED: { color: "green", label: "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß" },
      REJECTED: { color: "red", label: "üö´ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò" },
    };
    const config = statusConfig[status] || statusConfig.PENDING;
    return <Tag color={config.color}>{config.label}</Tag>;
  };

  // Date Formatter
  const formatDate = (dateString) => {
    if (!dateString) return "-";
    try {
      return new Date(dateString).toLocaleDateString("th-TH", {
        year: "numeric",
        month: "short",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
    } catch {
      return "-";
    }
  };

  // Avatar Color Generator
  const getAvatarColor = (name) => {
    const colors = ["#1890ff", "#722ed1", "#eb2f96", "#2f54eb", "#13c2c2", "#fa8c16"];
    const index = (name?.charCodeAt(0) || 0) % colors.length;
    return colors[index];
  };

  // Customer Status Statistics
  const getStatusStats = () => {
    const pending = customers.filter((c) => c.status === "PENDING").length;
    const approved = customers.filter((c) => c.status === "APPROVED").length;
    const rejected = customers.filter((c) => c.status === "REJECTED").length;
    return { pending, approved, rejected };
  };

  // Table Columns
  const columns = [
    {
      title: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤",
      dataIndex: "name",
      key: "name",
      render: (text, record) => (
        <div className="flex items-center">
          <Avatar
            style={{ backgroundColor: getAvatarColor(record.name) }}
            className="mr-2"
          >
            {record.name?.charAt(0).toUpperCase()}
          </Avatar>
          <span>{text}</span>
        </div>
      ),
    },
    {
      title: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
      dataIndex: "email",
      key: "email",
      render: (text) => text || "-",
    },
    {
      title: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£",
      dataIndex: "phone",
      key: "phone",
      render: (text) => text || "-",
    },
    {
      title: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
      dataIndex: "status",
      key: "status",
      render: (status) => getStatusBadge(status),
    },
    {
      title: "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£",
      dataIndex: "created_at",
      key: "created_at",
      render: (date) => formatDate(date),
    },
    {
      title: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£",
      key: "action",
      render: (_, record) => (
        <div className="flex space-x-2">
          <Button
            icon={<EyeOutlined />}
            onClick={() => handleViewCustomer(record)}
            className="rounded-lg"
            title="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"
          />
          {record.status === "PENDING" && (
            <>
              <Button
                icon={<CheckCircleOutlined />}
                onClick={() => handleApproveCustomer(record)}
                loading={actionLoading[record.id] === "approving"}
                type="primary"
                className="rounded-lg"
                title="‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"
              />
              <Button
                icon={<CloseCircleOutlined />}
                onClick={() => handleRejectCustomer(record)}
                loading={actionLoading[record.id] === "rejecting"}
                danger
                className="rounded-lg"
                title="‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
              />
            </>
          )}
        </div>
      ),
    },
  ];

  // Loading State
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <Spin indicator={<LoadingOutlined style={{ fontSize: 48 }} spin />} />
        <p className="ml-4 text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...</p>
      </div>
    );
  }

  const stats = getStatusStats();

  // Main Render
  return (
    <ErrorBoundary>
      <div className="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <div className="flex items-center mb-6">
              <UserOutlined className="text-4xl text-blue-500 mr-4" />
              <div>
                <h1 className="text-3xl font-bold text-gray-900">
                  ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                </h1>
                <p className="text-gray-600">
                  ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                </p>
              </div>
            </div>

            {/* Stats Cards */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
              <Card hoverable className="rounded-lg">
                <Statistic
                  title="‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
                  value={totalCustomers}
                  prefix={<UserOutlined />}
                />
              </Card>
              <Card hoverable className="rounded-lg">
                <Statistic
                  title="‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
                  value={stats.pending}
                  prefix={<LoadingOutlined />}
                  valueStyle={{ color: "#faad14" }}
                />
              </Card>
              <Card hoverable className="rounded-lg">
                <Statistic
                  title="‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß"
                  value={stats.approved}
                  prefix={<CheckCircleOutlined />}
                  valueStyle={{ color: "#52c41a" }}
                />
              </Card>
              <Card hoverable className="rounded-lg">
                <Statistic
                  title="‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò"
                  value={stats.rejected}
                  prefix={<CloseCircleOutlined />}
                  valueStyle={{ color: "#ff4d4f" }}
                />
              </Card>
            </div>
          </div>

          {/* Error Alert */}
          {error && (
            <Alert
              message="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
              description={error}
              type="error"
              showIcon
              className="mb-6 rounded-lg"
              action={
                <Button
                  type="primary"
                  danger
                  onClick={() => window.location.reload()}
                  className="rounded-lg"
                >
                  ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
                </Button>
              }
            />
          )}

          {/* Search and Filter */}
          <div className="mb-6 flex flex-col sm:flex-row gap-4">
            <Input
              prefix={<SearchOutlined />}
              placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="rounded-lg"
              size="large"
            />
            <Select
              value={statusFilter}
              onChange={(value) => setStatusFilter(value)}
              className="w-full sm:w-48"
              size="large"
            >
              <Select.Option value="ALL">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Select.Option>
              <Select.Option value="PENDING">‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</Select.Option>
              <Select.Option value="APPROVED">‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß</Select.Option>
              <Select.Option value="REJECTED">‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò</Select.Option>
            </Select>
          </div>

          {/* Customer Table */}
          <Table
            columns={columns}
            dataSource={filteredCustomers}
            rowKey="id"
            pagination={false}
            locale={{
              emptyText: (
                <div className="py-8 text-center">
                  <UserOutlined className="text-4xl text-gray-400 mb-2" />
                  <h3 className="text-lg font-semibold text-gray-700">
                    ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                  </h3>
                  <p className="text-gray-500">
                    ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                  </p>
                  {searchTerm && (
                    <Button
                      type="primary"
                      onClick={() => setSearchTerm("")}
                      className="mt-4 rounded-lg"
                    >
                      ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                    </Button>
                  )}
                </div>
              ),
            }}
            className="rounded-lg shadow-lg"
          />

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="mt-6 flex items-center justify-between">
              <span className="text-gray-600">
                ‡πÅ‡∏™‡∏î‡∏á {filteredCustomers.length} ‡∏à‡∏≤‡∏Å {totalCustomers} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </span>
              <div className="flex items-center space-x-2">
                <Button
                  icon={<LeftOutlined />}
                  onClick={() => setPage((prev) => Math.max(prev - 1, 1))}
                  disabled={page === 1}
                  className="rounded-lg"
                />
                <span className="text-gray-600">
                  ‡∏´‡∏ô‡πâ‡∏≤ {page} / {totalPages}
                </span>
                <Button
                  icon={<RightOutlined />}
                  onClick={() => setPage((prev) => Math.min(prev + 1, totalPages))}
                  disabled={page === totalPages}
                  className="rounded-lg"
                />
              </div>
            </div>
          )}

          {/* Customer Detail Modal */}
          <Modal
            title="‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
            open={showModal}
            onCancel={() => setShowModal(false)}
            footer={null}
            centered
            className="rounded-lg"
            width={600}
          >
            {selectedCustomer && (
              <div className="space-y-6">
                <div className="flex items-center">
                  <Avatar
                    size={64}
                    style={{ backgroundColor: getAvatarColor(selectedCustomer.name) }}
                    className="mr-4"
                  >
                    {selectedCustomer.name?.charAt(0).toUpperCase()}
                  </Avatar>
                  <div>
                    <h3 className="text-xl font-semibold">{selectedCustomer.name}</h3>
                    {getStatusBadge(selectedCustomer.status)}
                  </div>
                </div>
                <div className="space-y-4">
                  <div className="flex items-center">
                    <MailOutlined className="text-gray-500 mr-3" />
                    <div>
                      <p className="text-sm text-gray-600">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</p>
                      <p>{selectedCustomer.email || "-"}</p>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <PhoneOutlined className="text-gray-500 mr-3" />
                    <div>
                      <p className="text-sm text-gray-600">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</p>
                      <p>{selectedCustomer.phone || "-"}</p>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <CalendarOutlined className="text-gray-500 mr-3" />
                    <div>
                      <p className="text-sm text-gray-600">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£</p>
                      <p>{formatDate(selectedCustomer.created_at)}</p>
                    </div>
                  </div>
                  {selectedCustomer.address && (
                    <div className="flex items-start">
                      <HomeOutlined className="text-gray-500 mr-3 mt-1" />
                      <div>
                        <p className="text-sm text-gray-600">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</p>
                        <p>{selectedCustomer.address}</p>
                      </div>
                    </div>
                  )}
                </div>
                <div className="flex justify-end space-x-3">
                  {selectedCustomer.status === "PENDING" && (
                    <>
                      <Button
                        type="primary"
                        onClick={() => {
                          setShowModal(false);
                          handleApproveCustomer(selectedCustomer);
                        }}
                        loading={actionLoading[selectedCustomer.id] === "approving"}
                        className="rounded-lg"
                      >
                        ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                      </Button>
                      <Button
                        danger
                        onClick={() => {
                          setShowModal(false);
                          handleRejectCustomer(selectedCustomer);
                        }}
                        loading={actionLoading[selectedCustomer.id] === "rejecting"}
                        className="rounded-lg"
                      >
                        ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
                      </Button>
                    </>
                  )}
                  <Button
                    onClick={() => setShowModal(false)}
                    className="rounded-lg"
                  >
                    ‡∏õ‡∏¥‡∏î
                  </Button>
                </div>
              </div>
            )}
          </Modal>
        </div>
      </div>
    </ErrorBoundary>
  );
}